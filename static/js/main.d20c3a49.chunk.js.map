{"version":3,"sources":["components/numpad/numpad.tsx","components/sudoku/sudoku.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["nums","undefined","NumPad","props","context","buttonPressTimer","map","cell","renderButton","num","this","setTimeout","emitNote","clearTimeout","emitClick","className","onTouchStart","handleButtonPress","onTouchEnd","handleButtonRelease","onMouseDown","onMouseUp","onMouseLeave","React","Sudoku","sudokuHelper","cells","i","row","j","push","value","wrong","editable","notes","state","focus","then","module","generateSudoku","str","val","parseInt","fromString","generate_sudoku","setState","x","y","Math","min","max","check","ix","indexOf","splice","sort","col","sq","floor","includes","document","addEventListener","event","handleKeyPress","xFocus","yFocus","parsed","key","keyCode","NaN","ctrlKey","setNote","setCell","deleteNotes","renderCell","onClick","content","focused","set","classes","join","onKeyPress","nativeEvent","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d20c3a49.chunk.js","sourcesContent":["import * as React from 'react';\nimport \"./style.css\";\nimport { CellValue } from \"../sudoku/sudoku\";\n\nconst nums = [1,2,3,4,5,6,7,8,9,undefined];\n\ninterface NumPadProps {\n    emitClick(num: CellValue): void;\n    emitNote(num: number): void;\n}\n\nexport class NumPad extends React.Component<NumPadProps, {}> {\n    private buttonPressTimer?: any;\n\n    constructor(props: any, context: any) {\n        super(props, context);\n    }\n\n    render() {\n        return <div>\n            <table>\n                <tr>\n                    {nums.map(cell => this.renderButton(cell))}\n                </tr>\n            </table>\n        </div>;\n    }\n\n    handleButtonPress(num: CellValue) {\n        this.buttonPressTimer = setTimeout(() => {\n            if (num) {\n                this.props.emitNote(num);\n            }\n            this.buttonPressTimer = undefined;\n        }, 500);\n    }\n\n    handleButtonRelease(num: CellValue) {\n        if (this.buttonPressTimer) {\n            clearTimeout(this.buttonPressTimer);\n            this.buttonPressTimer = undefined;\n\n            this.props.emitClick(num);\n        }\n    }\n\n    renderButton(cell: CellValue) {\n        return <td className=\"numpad-cell\"\n                    onTouchStart={() => this.handleButtonPress(cell)}\n                    onTouchEnd={() => this.handleButtonRelease(cell)}\n                    onMouseDown={() => this.handleButtonPress(cell)}\n                    onMouseUp={() => this.handleButtonRelease(cell)}\n                    onMouseLeave={() => this.handleButtonRelease(cell)}>\n                {cell}\n        </td>;\n    }\n}","import * as React from 'react';\nimport \"./style.css\";\nimport { NumPad } from \"../numpad/numpad\";\n\nexport type CellValue = number | undefined;\n\ninterface Cell {\n    value: CellValue;\n    wrong: boolean;\n    editable: boolean;\n    notes: number[];\n}\n\ninterface SudokuState {\n    cells: Cell[][];\n    focus: number[];\n}\n\ninterface SudokuHelper {\n    generate_sudoku(): string;\n    solve_sudoku(s: string): string;\n}\n\nfunction fromString(str: string): Cell[][] {\n    const cells: Cell[][] = [];\n    for (let i = 0; i < 9; i++) {\n        const row: Cell[] = [];\n        for (let j = 0; j < 9; j++) {\n            const val = str[i*9 + j];\n\n            row.push({\n                value: val === '.' ? undefined : parseInt(val),\n                wrong: false,\n                editable: val === '.',\n                notes: []\n            });\n        }\n        cells.push(row);\n    }\n\n    return cells;\n}\n\nexport class Sudoku extends React.Component<{}, SudokuState> {\n    private sudokuHelper?: SudokuHelper;\n\n    constructor(props: any, context: any) {\n        super(props, context);\n\n        const cells: Cell[][] = [];\n        for (let i = 0; i < 9; i++) {\n            const row: Cell[] = [];\n            for (let j = 0; j < 9; j++) {\n                row.push({\n                    value: undefined,\n                    wrong: false,\n                    editable: true,\n                    notes: []\n                });\n            }\n            cells.push(row);\n        }\n\n        this.state = {\n            cells: cells,\n            focus: [-1,-1]\n        };\n\n        import(\"sudoku-generator\").then(module => {\n            this.sudokuHelper = module;\n\n            this.generateSudoku();\n        });\n    }\n\n    generateSudoku() {\n        if (this.sudokuHelper) {\n            const sudoku = this.sudokuHelper.generate_sudoku();\n            const cells = fromString(sudoku);\n            this.setState({\n                cells\n            });\n        }\n    }\n\n    focus(x: number, y: number) {\n        this.setState({\n            ...this.state,\n            focus: [Math.min(Math.max(0,x), 8), Math.min(Math.max(0,y), 8)]\n        });\n    }\n\n    setCell(x: number, y: number, value: CellValue) {\n        const cells = this.state.cells;\n        if (cells[x][y].editable) {\n            cells[x][y].value = value;\n\n            this.check(cells);\n        }\n    }\n\n    setNote(x: number, y: number, value: number) {\n        const cells = this.state.cells;\n\n        if (cells[x][y].editable) {\n            const ix = cells[x][y].notes.indexOf(value);\n            if (ix != -1) {\n                cells[x][y].notes.splice(ix, 1);\n            } else {\n                cells[x][y].notes.push(value);\n                cells[x][y].notes = cells[x][y].notes.sort();\n            }\n\n            this.setState({\n                cells\n            });\n        }\n    }\n\n    deleteNotes(x: number, y: number) {\n        const cells = this.state.cells;\n\n        if (cells[x][y].editable) {\n            cells[x][y].notes = [];\n\n            this.setState({\n                cells\n            });\n        }\n    }\n\n    check(cells: Cell[][]) {\n        for (let i = 0; i < 9; i++) {\n            for (let j = 0; j < 9; j++) {\n                cells[i][j].wrong = false;\n            }\n        }\n        for (let i = 0; i < 9; i++) {\n            let row: CellValue[] = [];\n            let col: CellValue[] = [];\n            let sq: CellValue[] = [];\n\n            for (let j = 0; j < 9; j++) {\n                const x = Math.floor(i/3)*3 + Math.floor(j/3);\n                const y = (i%3)*3 + (j%3);\n\n                if (row.includes(cells[i][j].value)) {\n                    cells[i][j].wrong = true;\n                }\n                if (col.includes(cells[j][i].value)) {\n                    cells[j][i].wrong = true;\n                }\n                if (sq.includes(cells[x][y].value)) {\n                    cells[x][y].wrong = true;\n                }\n\n                if (cells[i][j].value !== undefined) {\n                    row.push(cells[i][j].value);\n                }\n                if (cells[j][i].value !== undefined) {\n                    col.push(cells[j][i].value);\n                }\n                if (cells[x][y].value !== undefined) {\n                    sq.push(cells[x][y].value);\n                }\n            }\n\n            row = [];\n            col = [];\n            sq = [];\n\n            for (let j = 8; j >= 0; j--) {\n                const x = Math.floor(i/3)*3 + Math.floor(j/3);\n                const y = (i%3)*3 + (j%3);\n\n                if (row.includes(cells[i][j].value)) {\n                    cells[i][j].wrong = true;\n                }\n                if (col.includes(cells[j][i].value)) {\n                    cells[j][i].wrong = true;\n                }\n                if (sq.includes(cells[x][y].value)) {\n                    cells[x][y].wrong = true;\n                }\n\n                if (cells[i][j].value !== undefined) {\n                    row.push(cells[i][j].value);\n                }\n                if (cells[j][i].value !== undefined) {\n                    col.push(cells[j][i].value);\n                }\n                if (cells[x][y].value !== undefined) {\n                    sq.push(cells[x][y].value);\n                }\n            }\n        }\n\n        this.setState({\n            ...this.state, cells\n        });\n    }\n\n    componentDidMount(){\n        document.addEventListener(\"keypress\", event => this.handleKeyPress(event), false);\n        document.addEventListener(\"keydown\", event => this.handleKeyPress(event), false);\n    }\n\n    handleKeyPress(event: KeyboardEvent) {\n        let [xFocus, yFocus] = this.state.focus;\n\n        const parsed = parseInt(event.key);\n\n        if (xFocus != -1 && yFocus != -1) {\n            if (event.keyCode == 37) {\n                this.focus(xFocus, yFocus - 1);\n            } else if (event.keyCode == 38) {\n                this.focus(xFocus - 1, yFocus);\n            } else if (event.keyCode == 39) {\n                this.focus(xFocus, yFocus + 1);\n            } else if (event.keyCode == 40) {\n                this.focus(xFocus + 1, yFocus);\n            } else if (parsed != NaN && parsed >= 1 && parsed <= 9) {\n                if (event.ctrlKey) {\n                    this.setNote(xFocus, yFocus, parsed);\n                } else {\n                    this.setCell(xFocus, yFocus, parsed);\n                }\n            } else if (event.key === 'Backspace') {\n                if (event.ctrlKey) {\n                    this.deleteNotes(xFocus, yFocus);\n                } else {\n                    this.setCell(xFocus, yFocus, undefined);\n                }\n            }\n        }\n    }\n\n    render() {\n        let [xFocus, yFocus] = this.state.focus;\n\n        return <div className=\"sudoku\">\n            <table>\n                {this.state.cells.map((row, x) =>\n                    <tr className=\"sudoku-row\">\n                        {row.map((cell, y) => this.renderCell(cell, x, y))}\n                    </tr>\n                )}\n            </table>\n            <button onClick={() => this.generateSudoku()}>Generate new sudoku</button>\n            <NumPad\n                emitClick={value => this.setCell(xFocus, yFocus, value)}\n                emitNote={value => this.setNote(xFocus, yFocus, value)}/>\n        </div>;\n    }\n\n    renderCell(cell: Cell, x: number, y: number) {\n        let [xFocus, yFocus] = this.state.focus;\n\n        const focused = xFocus == x && yFocus == y ? 'focus' : '';\n        const wrong = cell.wrong ? 'wrong' : '';\n        const set = !cell.wrong && cell.editable ? 'set' : '';\n        const classes = `cell ${focused} ${wrong} ${set}`\n\n        let content;\n        if (cell.value) {\n            content = cell.value;\n        } else {\n            content = <span className=\"note\">{cell.notes.join('')}</span>\n        }\n\n        return <td className={classes}\n            onClick={() => this.focus(x,y)}\n            onKeyPress={event => this.handleKeyPress(event.nativeEvent)}>\n                {content}\n        </td>;\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Sudoku } from './components/sudoku/sudoku';\n\nfunction App() {\n  return (\n    <Sudoku />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}